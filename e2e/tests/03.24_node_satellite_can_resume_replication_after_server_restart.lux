[doc NodeJS Satellite can resume replication after the sync service restarts]
# The focus in this tests is the correct state restoration on the server when it restarts.

[include _shared.luxinc]
[include _satellite_macros.luxinc]

[invoke setup]

[shell proxy_1]
    [invoke migrate_items_table 001]
    [invoke migrate_other_items_table 002]

[invoke setup_client 1 electric_1 5133]

[shell pg_1]
    !INSERT INTO public.items (id, content) VALUES \
       ('00000000-0000-0000-0000-000000000001', 'not in shape'), \
       ('00000000-0000-0000-0000-000000000002', 'shape-1'), \
       ('00000000-0000-0000-0000-000000000003', 'shape-2');
    ??INSERT 0 3

    !INSERT INTO public.other_items VALUES \
       ('1', 'first', '00000000-0000-0000-0000-000000000001'), \
       ('2', 'second', '00000000-0000-0000-0000-000000000002'), \
       ('3', 'third', NULL);
    ??INSERT 0 3

[shell satellite_1]
    # [invoke node_sync_items "this.content like 'shape-%'"]
    [invoke node_sync_other_items ""]

    # Wait for the rows to arrive
    [invoke node_await_get "not in shape"]
    [invoke node_await_get "shape-1"]

# [shell electric_1]
#     # stop the server to restart it later
#     [invoke stop_electric 1]

[shell pg_1]
    !INSERT INTO public.items (id, content) VALUES \
       ('00000000-0000-0000-0000-000000000004', '.'), \
       ('00000000-0000-0000-0000-000000000005', 'shape-3'), \
       ('00000000-0000-0000-0000-000000000006', '..');
    ??INSERT 0 3

    !INSERT INTO public.other_items VALUES \
       ('4', '.', '00000000-0000-0000-0000-000000000004'), \
       ('5', '..', '00000000-0000-0000-0000-000000000005'), \
       ('6', '...', NULL);
    ??INSERT 0 3

# Start a new Satellite client that has a different set of subscriptions
[invoke setup_client 2 electric_1 5133]

[shell satellite_2]
    # [invoke node_sync_items "this.content = '*'"]
    # [invoke node_sync_other_items "this.id like 'two-%'"]
    # !const { synced } = await db.db.items.sync({ where: "this.content like 'shape-%'" })
    !const { synced } = await db.db.items.sync({ \
       where: "this.content like 'shape-%'", \
       include: { other_items: true } \
     }); await synced

    # # Disconnect the client so that it does not see the next batch of updates
    # [invoke client_disconnect]

    # Wait for the rows to arrive
    [invoke node_await_get "shape-1"]
    [invoke node_await_get "shape-2"]
    [invoke node_await_get "shape-3"]
    [invoke node_await_get_from_table "other_items" "second"]
    [invoke node_await_get_from_table "other_items" ".."]

[shell pg_1]
    !INSERT INTO public.items (id, content) VALUES (gen_random_uuid(), '...');
    ??INSERT 0 1

# [shell satellite_1]
    #!clienet.add_item(...)


# Now restart the server, verify that both clients reconnect and are able to
# to catch up to the latest server state.

[cleanup]
  [invoke teardown]
